version: '3.8'

services:
  # PostgreSQL Database Container
  database:
    image: postgres:15-alpine
    container_name: srt-search-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: srt_search
      POSTGRES_USER: srt_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-srt_secure_pass_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U srt_user -d srt_search"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # FastAPI Backend Container
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    container_name: srt-search-api
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://srt_user:${DB_PASSWORD:-srt_secure_pass_2024}@database:5432/srt_search
      DATABASE_TYPE: postgresql
      
      # Media Configuration
      MEDIA_DIR: /media
      
      # Application Configuration
      ENV: production
      API_HOST: 0.0.0.0
      API_PORT: 8000
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
    volumes:
      - "${MEDIA_DIR:-./media}:/media:ro"
      - api_logs:/app/logs
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Web Server Container
  web:
    build:
      context: .
      dockerfile: docker/web.Dockerfile
    container_name: srt-search-web
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "${WEB_PORT:-3456}:80"
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Network Configuration
networks:
  backend:
    driver: bridge
    internal: true  # Database network is internal only
  frontend:
    driver: bridge

# Volume Configuration
volumes:
  db_data:
    driver: local
  api_logs:
    driver: local